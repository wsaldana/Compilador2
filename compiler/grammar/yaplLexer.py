# Generated from yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,4,14,164,8,14,
        11,14,12,14,165,1,14,1,14,1,15,3,15,171,8,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,
        1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,38,1,38,1,38,1,38,5,38,233,8,38,10,38,12,38,236,9,38,1,38,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,247,8,39,10,39,12,39,250,
        9,39,1,39,1,39,1,40,4,40,255,8,40,11,40,12,40,256,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,3,41,268,8,41,1,42,1,42,5,42,272,8,
        42,10,42,12,42,275,9,42,1,43,1,43,5,43,279,8,43,10,43,12,43,282,
        9,43,1,44,1,44,1,44,1,45,1,45,1,45,5,45,290,8,45,10,45,12,45,293,
        9,45,1,45,1,45,1,45,1,234,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,0,91,45,1,0,24,2,0,67,67,99,99,2,0,76,76,
        108,108,2,0,65,65,97,97,2,0,83,83,115,115,2,0,69,69,101,101,2,0,
        84,84,116,116,2,0,87,87,119,119,2,0,72,72,104,104,2,0,73,73,105,
        105,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,70,
        70,102,102,2,0,82,82,114,114,2,0,86,86,118,118,2,0,68,68,100,100,
        3,0,9,10,12,13,32,32,2,0,10,10,13,13,1,0,48,57,1,0,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,65,90,4,0,98,98,102,102,110,110,116,116,
        2,0,34,34,39,39,305,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,99,1,0,0,0,5,103,1,0,0,0,7,109,1,
        0,0,0,9,114,1,0,0,0,11,119,1,0,0,0,13,124,1,0,0,0,15,127,1,0,0,0,
        17,130,1,0,0,0,19,135,1,0,0,0,21,138,1,0,0,0,23,147,1,0,0,0,25,154,
        1,0,0,0,27,158,1,0,0,0,29,163,1,0,0,0,31,170,1,0,0,0,33,176,1,0,
        0,0,35,178,1,0,0,0,37,180,1,0,0,0,39,182,1,0,0,0,41,184,1,0,0,0,
        43,186,1,0,0,0,45,188,1,0,0,0,47,190,1,0,0,0,49,192,1,0,0,0,51,194,
        1,0,0,0,53,196,1,0,0,0,55,198,1,0,0,0,57,200,1,0,0,0,59,202,1,0,
        0,0,61,204,1,0,0,0,63,206,1,0,0,0,65,209,1,0,0,0,67,211,1,0,0,0,
        69,214,1,0,0,0,71,216,1,0,0,0,73,219,1,0,0,0,75,222,1,0,0,0,77,228,
        1,0,0,0,79,242,1,0,0,0,81,254,1,0,0,0,83,267,1,0,0,0,85,269,1,0,
        0,0,87,276,1,0,0,0,89,283,1,0,0,0,91,286,1,0,0,0,93,94,7,0,0,0,94,
        95,7,1,0,0,95,96,7,2,0,0,96,97,7,3,0,0,97,98,7,3,0,0,98,2,1,0,0,
        0,99,100,7,1,0,0,100,101,7,4,0,0,101,102,7,5,0,0,102,4,1,0,0,0,103,
        104,7,6,0,0,104,105,7,7,0,0,105,106,7,8,0,0,106,107,7,1,0,0,107,
        108,7,4,0,0,108,6,1,0,0,0,109,110,7,5,0,0,110,111,7,7,0,0,111,112,
        7,4,0,0,112,113,7,9,0,0,113,8,1,0,0,0,114,115,7,1,0,0,115,116,7,
        10,0,0,116,117,7,10,0,0,117,118,7,11,0,0,118,10,1,0,0,0,119,120,
        7,11,0,0,120,121,7,10,0,0,121,122,7,10,0,0,122,123,7,1,0,0,123,12,
        1,0,0,0,124,125,7,8,0,0,125,126,7,12,0,0,126,14,1,0,0,0,127,128,
        7,12,0,0,128,129,7,8,0,0,129,16,1,0,0,0,130,131,7,4,0,0,131,132,
        7,1,0,0,132,133,7,3,0,0,133,134,7,4,0,0,134,18,1,0,0,0,135,136,7,
        8,0,0,136,137,7,9,0,0,137,20,1,0,0,0,138,139,7,8,0,0,139,140,7,9,
        0,0,140,141,7,7,0,0,141,142,7,4,0,0,142,143,7,13,0,0,143,144,7,8,
        0,0,144,145,7,5,0,0,145,146,7,3,0,0,146,22,1,0,0,0,147,148,7,8,0,
        0,148,149,7,3,0,0,149,150,7,14,0,0,150,151,7,10,0,0,151,152,7,8,
        0,0,152,153,7,15,0,0,153,24,1,0,0,0,154,155,7,9,0,0,155,156,7,4,
        0,0,156,157,7,6,0,0,157,26,1,0,0,0,158,159,7,9,0,0,159,160,7,10,
        0,0,160,161,7,5,0,0,161,28,1,0,0,0,162,164,7,16,0,0,163,162,1,0,
        0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,167,1,0,
        0,0,167,168,6,14,0,0,168,30,1,0,0,0,169,171,5,13,0,0,170,169,1,0,
        0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,5,10,0,0,173,174,1,0,
        0,0,174,175,6,15,0,0,175,32,1,0,0,0,176,177,5,44,0,0,177,34,1,0,
        0,0,178,179,5,58,0,0,179,36,1,0,0,0,180,181,5,46,0,0,181,38,1,0,
        0,0,182,183,5,59,0,0,183,40,1,0,0,0,184,185,5,40,0,0,185,42,1,0,
        0,0,186,187,5,41,0,0,187,44,1,0,0,0,188,189,5,123,0,0,189,46,1,0,
        0,0,190,191,5,125,0,0,191,48,1,0,0,0,192,193,5,126,0,0,193,50,1,
        0,0,0,194,195,5,64,0,0,195,52,1,0,0,0,196,197,5,43,0,0,197,54,1,
        0,0,0,198,199,5,45,0,0,199,56,1,0,0,0,200,201,5,42,0,0,201,58,1,
        0,0,0,202,203,5,47,0,0,203,60,1,0,0,0,204,205,5,60,0,0,205,62,1,
        0,0,0,206,207,5,60,0,0,207,208,5,61,0,0,208,64,1,0,0,0,209,210,5,
        62,0,0,210,66,1,0,0,0,211,212,5,62,0,0,212,213,5,61,0,0,213,68,1,
        0,0,0,214,215,5,61,0,0,215,70,1,0,0,0,216,217,5,61,0,0,217,218,5,
        62,0,0,218,72,1,0,0,0,219,220,5,60,0,0,220,221,5,45,0,0,221,74,1,
        0,0,0,222,223,5,69,0,0,223,224,5,82,0,0,224,225,5,82,0,0,225,226,
        5,79,0,0,226,227,5,82,0,0,227,76,1,0,0,0,228,229,5,40,0,0,229,230,
        5,42,0,0,230,234,1,0,0,0,231,233,9,0,0,0,232,231,1,0,0,0,233,236,
        1,0,0,0,234,235,1,0,0,0,234,232,1,0,0,0,235,237,1,0,0,0,236,234,
        1,0,0,0,237,238,5,42,0,0,238,239,5,41,0,0,239,240,1,0,0,0,240,241,
        6,38,0,0,241,78,1,0,0,0,242,243,5,45,0,0,243,244,5,45,0,0,244,248,
        1,0,0,0,245,247,8,17,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,
        1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,248,1,0,0,0,251,252,
        6,39,0,0,252,80,1,0,0,0,253,255,7,18,0,0,254,253,1,0,0,0,255,256,
        1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,82,1,0,0,0,258,259,5,
        116,0,0,259,260,5,114,0,0,260,261,5,117,0,0,261,268,5,101,0,0,262,
        263,5,102,0,0,263,264,5,97,0,0,264,265,5,108,0,0,265,266,5,115,0,
        0,266,268,5,101,0,0,267,258,1,0,0,0,267,262,1,0,0,0,268,84,1,0,0,
        0,269,273,7,19,0,0,270,272,7,20,0,0,271,270,1,0,0,0,272,275,1,0,
        0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,86,1,0,0,0,275,273,1,0,0,
        0,276,280,7,21,0,0,277,279,7,20,0,0,278,277,1,0,0,0,279,282,1,0,
        0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,88,1,0,0,0,282,280,1,0,0,
        0,283,284,5,92,0,0,284,285,7,22,0,0,285,90,1,0,0,0,286,291,5,34,
        0,0,287,290,3,89,44,0,288,290,8,23,0,0,289,287,1,0,0,0,289,288,1,
        0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,
        0,0,0,293,291,1,0,0,0,294,295,5,34,0,0,295,296,6,45,1,0,296,92,1,
        0,0,0,13,0,165,170,234,248,256,267,271,273,278,280,289,291,2,6,0,
        0,1,45,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    LET = 2
    WHILE = 3
    THEN = 4
    LOOP = 5
    POOL = 6
    IF = 7
    FI = 8
    ELSE = 9
    IN = 10
    INHERITS = 11
    ISVOID = 12
    NEW = 13
    NOT = 14
    WS = 15
    NEWLINE = 16
    COMMA = 17
    COLON = 18
    PERIOD = 19
    SEMICOLON = 20
    LPAREN = 21
    RPAREN = 22
    LBRACE = 23
    RBRACE = 24
    NEGATIVE = 25
    AT = 26
    PLUS = 27
    MINUS = 28
    MULT = 29
    DIV = 30
    LESS_THAN = 31
    LESS_EQUAL = 32
    GREATER_THAN = 33
    GREATER_EQUAL = 34
    EQUAL = 35
    FAT_ARROW = 36
    ASSIGN = 37
    ERROR = 38
    COMMENT_BLOCK = 39
    COMMENT_LINE = 40
    INT_VAR = 41
    BOOL_VAR = 42
    ID_VAR = 43
    TYPE_IDENTIFIER = 44
    STR_VAR = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "':'", "'.'", "';'", "'('", "')'", "'{'", "'}'", "'~'", 
            "'@'", "'+'", "'-'", "'*'", "'/'", "'<'", "'<='", "'>'", "'>='", 
            "'='", "'=>'", "'<-'", "'ERROR'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "LET", "WHILE", "THEN", "LOOP", "POOL", "IF", "FI", 
            "ELSE", "IN", "INHERITS", "ISVOID", "NEW", "NOT", "WS", "NEWLINE", 
            "COMMA", "COLON", "PERIOD", "SEMICOLON", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "NEGATIVE", "AT", "PLUS", "MINUS", "MULT", 
            "DIV", "LESS_THAN", "LESS_EQUAL", "GREATER_THAN", "GREATER_EQUAL", 
            "EQUAL", "FAT_ARROW", "ASSIGN", "ERROR", "COMMENT_BLOCK", "COMMENT_LINE", 
            "INT_VAR", "BOOL_VAR", "ID_VAR", "TYPE_IDENTIFIER", "STR_VAR" ]

    ruleNames = [ "CLASS", "LET", "WHILE", "THEN", "LOOP", "POOL", "IF", 
                  "FI", "ELSE", "IN", "INHERITS", "ISVOID", "NEW", "NOT", 
                  "WS", "NEWLINE", "COMMA", "COLON", "PERIOD", "SEMICOLON", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "NEGATIVE", "AT", 
                  "PLUS", "MINUS", "MULT", "DIV", "LESS_THAN", "LESS_EQUAL", 
                  "GREATER_THAN", "GREATER_EQUAL", "EQUAL", "FAT_ARROW", 
                  "ASSIGN", "ERROR", "COMMENT_BLOCK", "COMMENT_LINE", "INT_VAR", 
                  "BOOL_VAR", "ID_VAR", "TYPE_IDENTIFIER", "ESC_SEQ", "STR_VAR" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[45] = self.STR_VAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STR_VAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

              text = self.text
              char_count = 0
              char_limit = 25
              eof = False
              sizeerror = False
              backslash = False
              nullflag = False
              esc_nullflag = False
              unescaped = False
              esc_chars = {
                  '\\n': '\n',
                  '\\t': '\t',
                  '\\f': '\f',
                  '\\b': '\b',
                  '\\"': '\"',
                  '\\\\': '\\'
              }
              str_list = []
              length = len(text)
              if (text[length - 1] != '"' and text[length - 1] != '\n' and text[length - 1] != '\\') or length == 1:
                  eof = True
              elif text[length - 1] == '\n':
                  unescaped = True
              elif text[length - 1] == '\\':
                  backslash = True
              i = 1
              while i < length - 1:
                  if text[i] == '\\':
                      if text[i:i + 2] in esc_chars:
                          str_list.append(esc_chars[text[i:i + 2]])
                          i += 2
                      elif text[i + 1] == '\n':
                          str_list.append('\n')
                          i += 2
                          if i == length - 1:
                              eof = True
                              unescaped = False
                      elif text[i + 1] == '\r':
                          str_list.append('\r')
                          i += 2
                          unescaped = True
                      elif text[i + 1] == '\u0000' and not nullflag:
                          esc_nullflag = True
                          break
                      else:
                          str_list.append(text[i + 1])
                          i += 2
                  elif text[i] == '\u0000' and not esc_nullflag:
                      nullflag = True
                      break
                  else:
                      str_list.append(text[i])
                      i += 1
                  char_count += 1
                  if char_count > char_limit:
                      sizeerror = True
                      break
              if esc_nullflag:
                  self.type = self.ERROR
                  self.text = "String contains escaped null character."
                  return
              if backslash and char_count < char_limit + 2:
                  self.type = self.ERROR
                  self.text = "Escaped character at end of file"
                  return
              if sizeerror:
                  self.type = self.ERROR
                  self.text = "String exceeded max length"
                  return
              if unescaped and char_count < char_limit + 2:
                  self.type = self.ERROR
                  self.text = "Expected end of string"
                  return
              if eof:
                  self.type = self.ERROR
                  self.text = "EOF in string"
                  return
              if nullflag:
                  self.type = self.ERROR
                  self.text = "String contains null character."
                  return

              formatted_str = ''.join(str_list)
              self.text = formatted_str

     


