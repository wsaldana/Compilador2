# Generated from yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,299,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,4,14,
        166,8,14,11,14,12,14,167,1,14,1,14,1,15,3,15,173,8,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,40,5,40,246,8,40,10,40,12,40,249,9,40,1,40,1,40,
        1,40,1,40,1,40,1,41,1,41,1,41,1,41,5,41,260,8,41,10,41,12,41,263,
        9,41,1,41,1,41,1,42,4,42,268,8,42,11,42,12,42,269,1,43,1,43,5,43,
        274,8,43,10,43,12,43,277,9,43,1,44,1,44,5,44,281,8,44,10,44,12,44,
        284,9,44,1,45,1,45,1,45,1,46,1,46,1,46,5,46,292,8,46,10,46,12,46,
        295,9,46,1,46,1,46,1,46,1,247,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,0,93,46,1,0,24,2,0,67,67,99,99,
        2,0,76,76,108,108,2,0,65,65,97,97,2,0,83,83,115,115,2,0,69,69,101,
        101,2,0,84,84,116,116,2,0,87,87,119,119,2,0,72,72,104,104,2,0,73,
        73,105,105,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,
        2,0,70,70,102,102,2,0,82,82,114,114,2,0,86,86,118,118,2,0,68,68,
        100,100,3,0,9,10,12,13,32,32,2,0,10,10,13,13,1,0,48,57,1,0,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,65,90,4,0,98,98,102,102,110,110,
        116,116,2,0,34,34,39,39,306,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,101,1,0,0,0,
        5,105,1,0,0,0,7,111,1,0,0,0,9,116,1,0,0,0,11,121,1,0,0,0,13,126,
        1,0,0,0,15,129,1,0,0,0,17,132,1,0,0,0,19,137,1,0,0,0,21,140,1,0,
        0,0,23,149,1,0,0,0,25,156,1,0,0,0,27,160,1,0,0,0,29,165,1,0,0,0,
        31,172,1,0,0,0,33,178,1,0,0,0,35,180,1,0,0,0,37,182,1,0,0,0,39,184,
        1,0,0,0,41,186,1,0,0,0,43,188,1,0,0,0,45,190,1,0,0,0,47,192,1,0,
        0,0,49,194,1,0,0,0,51,196,1,0,0,0,53,198,1,0,0,0,55,203,1,0,0,0,
        57,209,1,0,0,0,59,211,1,0,0,0,61,213,1,0,0,0,63,215,1,0,0,0,65,217,
        1,0,0,0,67,219,1,0,0,0,69,222,1,0,0,0,71,224,1,0,0,0,73,227,1,0,
        0,0,75,229,1,0,0,0,77,232,1,0,0,0,79,235,1,0,0,0,81,241,1,0,0,0,
        83,255,1,0,0,0,85,267,1,0,0,0,87,271,1,0,0,0,89,278,1,0,0,0,91,285,
        1,0,0,0,93,288,1,0,0,0,95,96,7,0,0,0,96,97,7,1,0,0,97,98,7,2,0,0,
        98,99,7,3,0,0,99,100,7,3,0,0,100,2,1,0,0,0,101,102,7,1,0,0,102,103,
        7,4,0,0,103,104,7,5,0,0,104,4,1,0,0,0,105,106,7,6,0,0,106,107,7,
        7,0,0,107,108,7,8,0,0,108,109,7,1,0,0,109,110,7,4,0,0,110,6,1,0,
        0,0,111,112,7,5,0,0,112,113,7,7,0,0,113,114,7,4,0,0,114,115,7,9,
        0,0,115,8,1,0,0,0,116,117,7,1,0,0,117,118,7,10,0,0,118,119,7,10,
        0,0,119,120,7,11,0,0,120,10,1,0,0,0,121,122,7,11,0,0,122,123,7,10,
        0,0,123,124,7,10,0,0,124,125,7,1,0,0,125,12,1,0,0,0,126,127,7,8,
        0,0,127,128,7,12,0,0,128,14,1,0,0,0,129,130,7,12,0,0,130,131,7,8,
        0,0,131,16,1,0,0,0,132,133,7,4,0,0,133,134,7,1,0,0,134,135,7,3,0,
        0,135,136,7,4,0,0,136,18,1,0,0,0,137,138,7,8,0,0,138,139,7,9,0,0,
        139,20,1,0,0,0,140,141,7,8,0,0,141,142,7,9,0,0,142,143,7,7,0,0,143,
        144,7,4,0,0,144,145,7,13,0,0,145,146,7,8,0,0,146,147,7,5,0,0,147,
        148,7,3,0,0,148,22,1,0,0,0,149,150,7,8,0,0,150,151,7,3,0,0,151,152,
        7,14,0,0,152,153,7,10,0,0,153,154,7,8,0,0,154,155,7,15,0,0,155,24,
        1,0,0,0,156,157,7,9,0,0,157,158,7,4,0,0,158,159,7,6,0,0,159,26,1,
        0,0,0,160,161,7,9,0,0,161,162,7,10,0,0,162,163,7,5,0,0,163,28,1,
        0,0,0,164,166,7,16,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,
        0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,6,14,0,0,170,30,1,
        0,0,0,171,173,5,13,0,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,
        0,0,0,174,175,5,10,0,0,175,176,1,0,0,0,176,177,6,15,0,0,177,32,1,
        0,0,0,178,179,5,44,0,0,179,34,1,0,0,0,180,181,5,58,0,0,181,36,1,
        0,0,0,182,183,5,46,0,0,183,38,1,0,0,0,184,185,5,59,0,0,185,40,1,
        0,0,0,186,187,5,40,0,0,187,42,1,0,0,0,188,189,5,41,0,0,189,44,1,
        0,0,0,190,191,5,123,0,0,191,46,1,0,0,0,192,193,5,125,0,0,193,48,
        1,0,0,0,194,195,5,126,0,0,195,50,1,0,0,0,196,197,5,64,0,0,197,52,
        1,0,0,0,198,199,5,116,0,0,199,200,5,114,0,0,200,201,5,117,0,0,201,
        202,5,101,0,0,202,54,1,0,0,0,203,204,5,102,0,0,204,205,5,97,0,0,
        205,206,5,108,0,0,206,207,5,115,0,0,207,208,5,101,0,0,208,56,1,0,
        0,0,209,210,5,43,0,0,210,58,1,0,0,0,211,212,5,45,0,0,212,60,1,0,
        0,0,213,214,5,42,0,0,214,62,1,0,0,0,215,216,5,47,0,0,216,64,1,0,
        0,0,217,218,5,60,0,0,218,66,1,0,0,0,219,220,5,60,0,0,220,221,5,61,
        0,0,221,68,1,0,0,0,222,223,5,62,0,0,223,70,1,0,0,0,224,225,5,62,
        0,0,225,226,5,61,0,0,226,72,1,0,0,0,227,228,5,61,0,0,228,74,1,0,
        0,0,229,230,5,61,0,0,230,231,5,62,0,0,231,76,1,0,0,0,232,233,5,60,
        0,0,233,234,5,45,0,0,234,78,1,0,0,0,235,236,5,69,0,0,236,237,5,82,
        0,0,237,238,5,82,0,0,238,239,5,79,0,0,239,240,5,82,0,0,240,80,1,
        0,0,0,241,242,5,40,0,0,242,243,5,42,0,0,243,247,1,0,0,0,244,246,
        9,0,0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,248,1,0,0,0,247,245,
        1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,251,5,42,0,0,251,252,
        5,41,0,0,252,253,1,0,0,0,253,254,6,40,0,0,254,82,1,0,0,0,255,256,
        5,45,0,0,256,257,5,45,0,0,257,261,1,0,0,0,258,260,8,17,0,0,259,258,
        1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,
        1,0,0,0,263,261,1,0,0,0,264,265,6,41,0,0,265,84,1,0,0,0,266,268,
        7,18,0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,
        1,0,0,0,270,86,1,0,0,0,271,275,7,19,0,0,272,274,7,20,0,0,273,272,
        1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,88,1,
        0,0,0,277,275,1,0,0,0,278,282,7,21,0,0,279,281,7,20,0,0,280,279,
        1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,90,1,
        0,0,0,284,282,1,0,0,0,285,286,5,92,0,0,286,287,7,22,0,0,287,92,1,
        0,0,0,288,293,5,34,0,0,289,292,3,91,45,0,290,292,8,23,0,0,291,289,
        1,0,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,
        1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,5,34,0,0,297,298,
        6,46,1,0,298,94,1,0,0,0,12,0,167,172,247,261,269,273,275,280,282,
        291,293,2,6,0,0,1,46,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    LET = 2
    WHILE = 3
    THEN = 4
    LOOP = 5
    POOL = 6
    IF = 7
    FI = 8
    ELSE = 9
    IN = 10
    INHERITS = 11
    ISVOID = 12
    NEW = 13
    NOT = 14
    WS = 15
    NEWLINE = 16
    COMMA = 17
    COLON = 18
    PERIOD = 19
    SEMICOLON = 20
    LPAREN = 21
    RPAREN = 22
    LBRACE = 23
    RBRACE = 24
    NEGATIVE = 25
    AT = 26
    TRUE = 27
    FALSE = 28
    PLUS = 29
    MINUS = 30
    MULT = 31
    DIV = 32
    LESS_THAN = 33
    LESS_EQUAL = 34
    GREATER_THAN = 35
    GREATER_EQUAL = 36
    EQUAL = 37
    FAT_ARROW = 38
    ASSIGN = 39
    ERROR = 40
    COMMENT_BLOCK = 41
    COMMENT_LINE = 42
    INT_VAR = 43
    ID_VAR = 44
    TYPE_IDENTIFIER = 45
    STR_VAR = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "':'", "'.'", "';'", "'('", "')'", "'{'", "'}'", "'~'", 
            "'@'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'<'", 
            "'<='", "'>'", "'>='", "'='", "'=>'", "'<-'", "'ERROR'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "LET", "WHILE", "THEN", "LOOP", "POOL", "IF", "FI", 
            "ELSE", "IN", "INHERITS", "ISVOID", "NEW", "NOT", "WS", "NEWLINE", 
            "COMMA", "COLON", "PERIOD", "SEMICOLON", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "NEGATIVE", "AT", "TRUE", "FALSE", "PLUS", 
            "MINUS", "MULT", "DIV", "LESS_THAN", "LESS_EQUAL", "GREATER_THAN", 
            "GREATER_EQUAL", "EQUAL", "FAT_ARROW", "ASSIGN", "ERROR", "COMMENT_BLOCK", 
            "COMMENT_LINE", "INT_VAR", "ID_VAR", "TYPE_IDENTIFIER", "STR_VAR" ]

    ruleNames = [ "CLASS", "LET", "WHILE", "THEN", "LOOP", "POOL", "IF", 
                  "FI", "ELSE", "IN", "INHERITS", "ISVOID", "NEW", "NOT", 
                  "WS", "NEWLINE", "COMMA", "COLON", "PERIOD", "SEMICOLON", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "NEGATIVE", "AT", 
                  "TRUE", "FALSE", "PLUS", "MINUS", "MULT", "DIV", "LESS_THAN", 
                  "LESS_EQUAL", "GREATER_THAN", "GREATER_EQUAL", "EQUAL", 
                  "FAT_ARROW", "ASSIGN", "ERROR", "COMMENT_BLOCK", "COMMENT_LINE", 
                  "INT_VAR", "ID_VAR", "TYPE_IDENTIFIER", "ESC_SEQ", "STR_VAR" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[46] = self.STR_VAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STR_VAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

              text = self.text
              char_count = 0
              char_limit = 25
              eof = False
              sizeerror = False
              backslash = False
              nullflag = False
              esc_nullflag = False
              unescaped = False
              esc_chars = {
                  '\\n': '\n',
                  '\\t': '\t',
                  '\\f': '\f',
                  '\\b': '\b',
                  '\\"': '\"',
                  '\\\\': '\\'
              }
              str_list = []
              length = len(text)
              if (text[length - 1] != '"' and text[length - 1] != '\n' and text[length - 1] != '\\') or length == 1:
                  eof = True
              elif text[length - 1] == '\n':
                  unescaped = True
              elif text[length - 1] == '\\':
                  backslash = True
              i = 1
              while i < length - 1:
                  if text[i] == '\\':
                      if text[i:i + 2] in esc_chars:
                          str_list.append(esc_chars[text[i:i + 2]])
                          i += 2
                      elif text[i + 1] == '\n':
                          str_list.append('\n')
                          i += 2
                          if i == length - 1:
                              eof = True
                              unescaped = False
                      elif text[i + 1] == '\r':
                          str_list.append('\r')
                          i += 2
                          unescaped = True
                      elif text[i + 1] == '\u0000' and not nullflag:
                          esc_nullflag = True
                          break
                      else:
                          str_list.append(text[i + 1])
                          i += 2
                  elif text[i] == '\u0000' and not esc_nullflag:
                      nullflag = True
                      break
                  else:
                      str_list.append(text[i])
                      i += 1
                  char_count += 1
                  if char_count > char_limit:
                      sizeerror = True
                      break
              if esc_nullflag:
                  self.type = self.ERROR
                  self.text = "String contains escaped null character."
                  return
              if backslash and char_count < char_limit + 2:
                  self.type = self.ERROR
                  self.text = "Escaped character at end of file"
                  return
              if sizeerror:
                  self.type = self.ERROR
                  self.text = "String exceeded max length"
                  return
              if unescaped and char_count < char_limit + 2:
                  self.type = self.ERROR
                  self.text = "Expected end of string"
                  return
              if eof:
                  self.type = self.ERROR
                  self.text = "EOF in string"
                  return
              if nullflag:
                  self.type = self.ERROR
                  self.text = "String contains null character."
                  return

              formatted_str = ''.join(str_list)
              self.text = formatted_str

     


